{"version":3,"sources":["components/LocationMarker.js","components/LocationInfoBox.js","components/Map.js","components/Spinner.gif","components/Loader.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMarker","lat","lng","onClick","className","icon","locationIcon","LocationInfoBox","info","id","title","Map","eventData","center","zoom","useState","locationInfo","setLocationInfo","markers","map","ev","categories","geometries","coordinates","bootstrapURLKeys","key","defaultCenter","defaultZoom","defaultProps","Loader","src","spinner","alt","Header","App","setEventData","loading","setLoading","useEffect","a","fetch","res","json","events","fetchEvents","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAWeA,EARQ,SAAC,GAA0B,EAAxBC,IAAwB,EAAnBC,IAAoB,IAAfC,EAAc,EAAdA,QAChC,OACI,qBAAKC,UAAU,kBAAkBD,QAASA,EAA1C,SACI,cAAC,OAAD,CAAME,KAAMC,IAAcF,UAAU,qBCOjCG,EAZS,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACvB,OACI,sBAAKJ,UAAU,gBAAf,UACI,qDACA,+BACI,sCAAQ,iCAAUI,EAAKC,QACvB,yCAAW,iCAAUD,EAAKE,kBCFpCC,EAAM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAC9B,EAAwCC,mBAAS,MAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAUN,EAAUO,KAAI,SAAAC,GAC1B,GAA2B,IAAxBA,EAAGC,WAAW,GAAGZ,GAChB,OAAS,cAAC,EAAD,CAAgBR,IAAKmB,EAAGE,WAAW,GAAGC,YAAY,GAAIrB,IAAKkB,EAAGE,WAAW,GAAGC,YAAY,GAAIpB,QAAS,kBAAMc,EAAgB,CAAER,GAAIW,EAAGX,GAAIC,MAAOU,EAAGV,cAKnK,OACI,sBAAKN,UAAU,MAAf,UACI,cAAC,IAAD,CACAoB,iBAAkB,CAAEC,IAAK,2CACzBC,cAAgBb,EAChBc,YAAcb,EAHd,SAKKI,IAEJF,GAAgB,cAAC,EAAD,CAAiBR,KAAMQ,QAKpDL,EAAIiB,aAAe,CACff,OAAQ,CACJZ,IAAK,SACLC,KAAM,YAEVY,KAAM,GAGKH,QCrCA,MAA0B,oCCW1BkB,EATA,WACX,OACI,sBAAKzB,UAAU,SAAf,UACI,qBAAK0B,IAAKC,EAASC,IAAI,YACvB,mDCKGC,EARA,WACX,OACI,wBAAQ7B,UAAU,SAAlB,SACI,+BAAI,cAAC,OAAD,CAAMC,KAAMC,MAAhB,4CCwBG4B,MAzBf,WACE,MAAkCnB,mBAAS,IAA3C,mBAAOH,EAAP,KAAkBuB,EAAlB,KACA,EAA8BpB,oBAAS,GAAvC,mBAAOqB,EAAP,KAAgBC,EAAhB,KAeA,OAbAC,qBAAU,YACS,uCAAG,gCAAAC,EAAA,6DAClBF,GAAW,GADO,SAEAG,MAAM,mDAFN,cAEZC,EAFY,gBAGOA,EAAIC,OAHX,gBAGVC,EAHU,EAGVA,OAERR,EAAaQ,GACbN,GAAW,GANO,4CAAH,qDAQjBO,KACC,IACHC,QAAQC,IAAIlC,GAGV,gCACE,cAAC,EAAD,IACGwB,EAAyC,cAAC,EAAD,IAA/B,cAAC,EAAD,CAAKxB,UAAWA,QCbpBmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ca0bb86b.chunk.js","sourcesContent":["import { Icon } from '@iconify/react'\nimport locationIcon from \"@iconify/icons-mdi/fire-alert\";\n\nconst LocationMarker = ({ lat, lng, onClick }) => {\n    return (\n        <div className=\"location-marker\" onClick={onClick}>\n            <Icon icon={locationIcon} className=\"location-icon\" />\n        </div>\n    )\n}\n\nexport default LocationMarker\n","\nconst LocationInfoBox = ({ info }) => {\n    return (\n        <div className=\"location-info\">\n            <h2>Event Location Info</h2>\n            <ul>\n                <li>ID: <strong>{ info.id }</strong></li>\n                <li>TITLE: <strong>{ info.title }</strong></li>\n            </ul>\n        </div>\n    )\n}\n\nexport default LocationInfoBox\n","import { useState } from 'react'\nimport GoogleMapReact from 'google-map-react'\nimport LocationMarker from './LocationMarker'\nimport LocationInfoBox from './LocationInfoBox'\n\nconst Map = ({ eventData, center, zoom }) => {\n    const [locationInfo, setLocationInfo] = useState(null)\n\n    const markers = eventData.map(ev => {\n        if(ev.categories[0].id === 8) {\n            return   <LocationMarker lat={ev.geometries[0].coordinates[1]} lng={ev.geometries[0].coordinates[0]} onClick={() => setLocationInfo({ id: ev.id, title: ev.title}\n            )}/>\n        }\n    })\n\n    return (\n        <div className=\"map\">\n            <GoogleMapReact\n            bootstrapURLKeys={{ key: 'AIzaSyAWapTjBgKnnJq3C8BXxsK0RJyZ-vT0Acg'}}\n            defaultCenter={ center }\n            defaultZoom={ zoom }\n            >\n                {markers}\n            </GoogleMapReact>\n            {locationInfo && <LocationInfoBox info={locationInfo}/>}\n        </div>\n    )\n}\n\nMap.defaultProps = {\n    center: {\n        lat: 37.785460,\n        lng: -122.425083\n    },\n    zoom: 6\n}\n\nexport default Map\n","export default __webpack_public_path__ + \"static/media/Spinner.35b42ff6.gif\";","import spinner from './Spinner.gif'\n\nconst Loader = () => {\n    return (\n        <div className=\"loader\">\n            <img src={spinner} alt=\"Loading\"></img>\n            <h1>Fetching Data</h1>\n        </div>\n    )\n}\n\nexport default Loader\n","import { Icon } from '@iconify/react'\nimport locationIcon from \"@iconify/icons-mdi/fire-alert\";\n\nconst Header = () => {\n    return (\n        <header className=\"header\">\n            <h1><Icon icon={locationIcon}/> Wildfire Tracker (Powered By Nasa)</h1>\n        </header>\n    )\n}\n\nexport default Header\n","import { useState, useEffect } from \"react\";\nimport Map from \"./components/Map\";\nimport Loader from \"./components/Loader\"\nimport Header from \"./components/Header\"\n\nfunction App() {\n  const [eventData, setEventData] = useState([])\n  const [loading, setLoading] = useState(false)\n  \n  useEffect(() => {\n    const fetchEvents = async () => {\n      setLoading(true)\n      const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\n      const { events } = await res.json()\n\n      setEventData(events)\n      setLoading(false)\n    }\n    fetchEvents()\n  }, [])\n  console.log(eventData);\n\n  return (\n    <div>\n      <Header />\n      { !loading ? <Map eventData={eventData}/> : <Loader />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}